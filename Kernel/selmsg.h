/*
 * xara-cairo, a vector drawing program
 *
 * Based on Xara LX, Copyright (C) 1993-2006 Xara Group Ltd.
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version 2.
 *
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 */

/*
 * */

// Definition of Selection messages

#ifndef INC_SELMSG
#define INC_SELMSG


/*********************************************************************************************
>	class SelChangingMessage : public Msg

	Author:		Jason_Williams (Xara Group Ltd) <camelotdev@xara.com>
	Created:	11/5/94
	Purpose:	This message is sent at the end of all operations which have changed the
				selection.
				
				It is generated by Application::UpdateSelection() and SelRange::Update()
				when they are called, which includes such things as a document change
				altering the selection.

	SeeAlso:	SelRange; Application

*********************************************************************************************/

class SelChangingMsg : public Msg
{
	CC_DECLARE_DYNAMIC(SelChangingMsg)

public:

	// Messages are sent on (after!) these events.
	// Note attribute changes are divided into two groups Colour attribute changes and
	//	non-colour attribute changes. Recognising this major division between attributes (colours
	//	change more frequently than other attributes) allows UI redraw to be somewhat optimised.
	// 	Sometimes it may be necessary to send both a COLOURATTCHANGED and a NONCOLOURATTCHANGED
	//	message!
	enum SelectionState
	{
		SELECTIONCHANGED,				// The selection has changed (ie. nodes have been added/removed
										//	from the Selection).
		COLOURATTCHANGED,				// An attribute in the selection to do with colours in some way has changed
		NONCOLOURATTCHANGED,			// An attribute in the selection not to do with colours has changed
		NODECHANGED,					// At least one of the nodes in the selection has changed
										// NOTE! This means that its bounds may have changed
		EFFECTSTACKCHANGED				// An effect/effects applied to the selection has changed
		// Cor! Lots of ways the selection can change, huh?!
	};

	
	SelectionState State;	   			// The state, as defined above
	BOOL InDifferentDocument;			// Flag indicating the selection has changed
										// to a different document than the last
										// SelChangingMsg was for.

										// Constructor
	SelChangingMsg(SelectionState NewState, BOOL DiffDoc=FALSE)
			: State(NewState), InDifferentDocument(DiffDoc)
			{ /* empty */ }
};

#endif
