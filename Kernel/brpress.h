/*
 * xara-cairo, a vector drawing program
 *
 * Based on Xara LX, Copyright (C) 1993-2006 Xara Group Ltd.
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version 2.
 *
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 */


// Brush point info classes header
// This file contains the declarations of various small classes that are used to store data 
// relevant to the brush attribute

#ifndef INC_BRPRESS
#define INC_BRPRESS

class CCObject;
class CXaraFileRecord;

class BrushPointInfo;
typedef std::map< MILLIPOINT, BrushPointInfo > PointsMap;

class CPathPointInfo
{
public:
	CPathPointInfo() { m_Point.x = m_Point.y = 0; m_Tangent = 0; }
	
	CPathPointInfo &operator=(CPathPointInfo CP)
	{
		m_Point.x = CP.m_Point.x; 
		m_Point.y = CP.m_Point.y;							
		m_Tangent = CP.m_Tangent;

		return *this;
	}

public: //members				  
	DocCoord	m_Point;
	double		m_Tangent;
};

/********************************************************************************************

>	class PressureItem : public CCObject

	Author:		Diccon_Yamanaka (Xara Group Ltd) <camelotdev@xara.com>
	Created:	7/1/97

	Purpose:	to store information about brush objects, including pressure
				
	Notes:		
********************************************************************************************/

class PressureItem : public CCObject
{
CC_DECLARE_MEMDUMP(PressureItem)

public:
	PressureItem() {m_Pressure = 0; m_Proportion = 0; m_Distance = 0;}
	PressureItem(const PressureItem&);
	PressureItem(UINT32 Pressure, double Proportion, MILLIPOINT Distance);

	PressureItem operator=(const PressureItem& Other);

	void WorkOutProportion(MILLIPOINT PathLength);
	BOOL WriteNative(CXaraFileRecord* pRecord);

public: //data
	UINT32 m_Pressure;
	double m_Proportion;
	MILLIPOINT m_Distance;
};


/********************************************************************************************

>	class BrushPointInfo : public CPathPointInfo

	Author:		Diccon_Yamanaka (Xara Group Ltd) <camelotdev@xara.com>
	Created:	7/1/97

	Purpose:	to store information about brush objects, including pressure
				
	Notes:		This class inherits coordinate and tangent data from CPathPointInfo
				This is a pretty fast and loose implementation but so it the parent and i
				didn't write that.

********************************************************************************************/

class BrushPointInfo : public CPathPointInfo
{
public:
	BrushPointInfo();
	BrushPointInfo(DocCoord Point, double Tangent, UINT32 Pressure);

	BrushPointInfo& operator=(BrushPointInfo &Other);

public:
	// data
	UINT32 m_Pressure;
};

/********************************************************************************************

>	class TimeStampBrushPoint : public BrushPointInfo

	Author:		Diccon_Yamanaka (Xara Group Ltd) <camelotdev@xara.com>
	Created:	7/1/97

	Purpose:	to store information about brush objects generated by the timestamping method
				
	Notes:		This class inherits coordinate and tangent data from CPathPointInfo
				This is a pretty fast and loose implementation but so it the parent and i
				didn't write that.

********************************************************************************************/


class TimeStampBrushPoint : public BrushPointInfo
{
public:
	TimeStampBrushPoint();
	TimeStampBrushPoint(CPathPointInfo PointInfo);
	TimeStampBrushPoint(DocCoord Point, double Tangent, MILLIPOINT Distance); 
	TimeStampBrushPoint(CPathPointInfo PointInfo, MILLIPOINT Distance);
	void WorkOutProportion(MILLIPOINT PathLength);

	static INT32  ComparePointInfo(const void* Point1, const void* Point2);

	BOOL WriteNative(CXaraFileRecord* pRecord);

public: //members
	TimeStampBrushPoint operator=(TimeStampBrushPoint OtherPoint);
	MILLIPOINT m_Distance; // the distance along the path
	double     m_Proportion; // the proportional distance along the path
};


typedef std::list< TimeStampBrushPoint >	TimeStampList;
typedef std::vector< PressureItem >			PressureArray;
typedef std::list< PressureItem >			PressureList;

#endif
