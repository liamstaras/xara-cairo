/*
 * xara-cairo, a vector drawing program
 *
 * Based on Xara LX, Copyright (C) 1993-2006 Xara Group Ltd.
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version 2.
 *
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 */





#ifndef  Include_CBiasGainGadget
#define  Include_CBiasGainGadget

//#include doccolor.h

class  CBiasGainDlg;
class  InformationBarOp;
class  CProfileBiasGain;
class  DocColour;
class  FillEffectAttribute;











//-------------------------------------------------------------------------------------------------
//
//	class CBiasGainGadget
//
//	Author:     Harrison Ainsworth
//	Date:		06/99
//	Purpose:	represent and contain a gadget specifically for selecting bias/gain choices. 
//				intended to enable easier addition of such a gadget to various toolbars.
//				it handles messages generated by user interaction with the windows gadget, and then
//				sends out commit or slider-set messages (containing the chosen values) to its owning 
//				infobar.
//	Implemen-	depends on a InformationBarOp and valid gadgetID, bubbleID and statusID.
//	tation:		
//	Invariants:	pOwningBar_m is valid, 
//				GadgetID_m is valid
//				BubbleID_m is valid
//				StatusID_m is valid
//				pDialog_m is valid
//
//-------------------------------------------------------------------------------------------------

class CBiasGainGadget
{

public: //-----------------------------------------------------------------------------------------


	CBiasGainGadget ();
	virtual ~CBiasGainGadget ();


	virtual void		Init ( DialogOp* pOwningDialog,
							   CGadgetID GadgetID, UINT32 BubbleID, UINT32 StatusID );
	
	virtual	void		Enable ( BOOL );
	virtual	void		GetPresetBiasGainValue ( WORD Index,  CProfileBiasGain& Value )			const;
	virtual INT32		FindPresetBiasGain (CProfileBiasGain const& Value)						const;

	// handle messages
	virtual	void		Message ( DialogMsg* );
	virtual	void		Message ( DialogMsg*,  CProfileBiasGain const& );
	virtual	void		CloseDialog ();
	

	// interface for use by CBiasGainDlg ----------------------
	virtual	void		DialogHasOpened ();
	virtual	void		DialogHasClosed ();

	virtual	CGadgetID	GetGadgetID ()															const;
	virtual	void		GetDialogTitle ( String_256& DlgTitle )									const;

	// DMc
	//void SetDialogBiasGain(CProfileBiasGain const& );

	// CGS
	// this allows the gadget to know abouts its linked dialog
	void SetCBaisGainDlg (CBiasGainDlg* pMyDlg) { pDialog_m = pMyDlg; }
	// this allows us to route message from the profile gadget (located on the dialog)
	// through the gadget that is located on the infobar
	void SetInfobarGadgetID (CGadgetID gadg) { InfobarGadgetID_m = gadg; }
	// this allows us to reinit the linked dialog when the selection changes
	void ReInitialiseDialog (CProfileBiasGain* ReInitOn, BOOL bMany);
	// allows us to query whether the gadgets linked dialog is open (i.e.  exists)
	BOOL IsDialogOpen () { if (pDialog_m != NULL) { return (TRUE); } else { return (FALSE); } }
	// allows us to change the mode of the linked dialog from its (default) object profile
	// rendering to its fill profile rendering
	void ToggleFillProfile () { useFillProfile = TRUE; }
	// our 'linked' dialog needs access to this information when it is created
	BOOL GetUseFillProfile () { return (useFillProfile); }
	// allows us to change the mode of the linked dialog from its (default) object profile
	// rendering to its transparent fill profile rendering
	void ToggleTranspFillProfile () { useTranspFillProfile = TRUE; }
	// our 'linked' dialog needs access to this information when it is created
	BOOL GetUseTranspFillProfile () { return (useTranspFillProfile); }
	// we need direct access the dialogs 'edited' biasgain within elans feathering bar ....
	CProfileBiasGain GetCurrentDialogProfile ();

	void SetStartColour(DocColour* NewCol);
	void SetEndColour(DocColour* NewCol);
	void SetEndColour2(DocColour* NewCol);
	void SetEndColour3(DocColour* NewCol);
	void SetStartTransp(UINT32* NewTransp);
	void SetEndTransp(UINT32* NewTransp);
	void SetEndTransp2(UINT32* NewTransp);
	void SetEndTransp3(UINT32* NewTransp);
	void SetFillEffect(FillEffectAttribute* NewFillEffect);

	DocColour* GetStartColour() { return (StartColour); }
	DocColour* GetEndColour() { return (EndColour); }
	DocColour* GetEndColour2() { return (EndColour2); }
	DocColour* GetEndColour3() { return (EndColour3); }
	UINT32* GetStartTransp() { return (StartTransp); }
	UINT32* GetEndTransp() { return (EndTransp); }
	UINT32* GetEndTransp2() { return (EndTransp2); }
	UINT32* GetEndTransp3() { return (EndTransp3); }
	FillEffectAttribute* GetFillEffect () { return (FillEffect); }

	// a necessary 'hack' for OpChangeFeatherProfile - to allow us to toggle the state of the
	// linked control button
//	InformationBarOp* GetOwningBar () { return (pOwningBar_m); }


protected: //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--


private: /////////////////////////////////////////////////////////////


	// members ------------------------------------------------
	DialogOp*			pOwningDialog_m;	// owner of me (when located on a dialog)
	CGadgetID			GadgetID_m;
	CGadgetID			InfobarGadgetID_m;	// owner of dialog
	UINT32				BubbleID_m;
	UINT32				StatusID_m;

	CBiasGainDlg*		pDialog_m;			// my linked dialog

	BOOL				useFillProfile;		// are we rendering objects or fills within
											// our linked dialog?
	BOOL				useTranspFillProfile;	// do we want to render transparency
												// fill profiles?

	DocColour* StartColour;
	DocColour* EndColour;
	DocColour* EndColour2;
	DocColour* EndColour3;
	FillEffectAttribute* FillEffect;
	UINT32* StartTransp;
	UINT32* EndTransp;
	UINT32* EndTransp2;
	UINT32* EndTransp3;


	enum { eNumberOfPresets = 5 };
	static const INT32			kNumberOfPresets_s;
	static const double			kBiasPresets_s[ eNumberOfPresets ];
	static const double			kGainPresets_s[ eNumberOfPresets ];




private:
	// Copying is disallowed.
	CBiasGainGadget ( const CBiasGainGadget& );
	CBiasGainGadget&	operator= ( const CBiasGainGadget& );

};


 





#endif//Include_CBiasGainGadget
